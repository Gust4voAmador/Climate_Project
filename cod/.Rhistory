# Crear tabla de contingencia entre 'genus' y 'water source'
tabla_contin <- table(data_filtered$`mosquito habitat mapper:genus`, data_filtered$`mosquito habitat mapper:water source`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contin) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_test <- fisher.test(tabla_contin, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_test <- chisq.test(tabla_contin)
}
# Almacenar el p-valor en el vector de p-valores
p_values[i] <- resultado_test$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_values)
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulations <- 20  # Número de simulaciones
n_classes <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_values <- numeric(n_simulations)  # Vector para almacenar los p-valores
for (i in 1:n_simulations) {
# Seleccionar aleatoriamente 5 clases de la columna 'water source'
random_classes <- sample(unique(data_clea$`mosquito habitat mapper:water source`), n_classes)
# Filtrar el data frame con las clases seleccionadas
data_filtered <- data_clea %>%
filter(`mosquito habitat mapper:water source` %in% random_classes)
# Crear tabla de contingencia entre 'genus' y 'water source'
tabla_contin <- table(data_filtered$`mosquito habitat mapper:genus`, data_filtered$`mosquito habitat mapper:water source`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contin) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_test <- fisher.test(tabla_contin, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_test <- chisq.test(tabla_contin)
}
# Almacenar el p-valor en el vector de p-valores
p_values[i] <- resultado_test$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_values)
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulations <- 20  # Número de simulaciones
n_classes <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_values <- numeric(n_simulations)  # Vector para almacenar los p-valores
for (i in 1:n_simulations) {
# Seleccionar aleatoriamente 5 clases de la columna 'water source'
random_classes <- sample(unique(data_clea$`mosquito habitat mapper:water source`), n_classes)
# Filtrar el data frame con las clases seleccionadas
data_filtered <- data_clea %>%
filter(`mosquito habitat mapper:water source` %in% random_classes)
# Crear tabla de contingencia entre 'genus' y 'water source'
tabla_contin <- table(data_filtered$`mosquito habitat mapper:genus`, data_filtered$`mosquito habitat mapper:water source`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contin) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_test <- fisher.test(tabla_contin, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_test <- chisq.test(tabla_contin)
}
# Almacenar el p-valor en el vector de p-valores
p_values[i] <- resultado_test$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_values)
print(paste("El promedio de p-valor obtenidos en las 20 pruebas es:", mean(p_values)))
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulations <- 20  # Número de simulaciones
n_classes <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_values <- numeric(n_simulations)  # Vector para almacenar los p-valores
for (i in 1:n_simulations) {
# Seleccionar aleatoriamente 5 clases de la columna 'water source'
random_classes <- sample(unique(data_clea$`mosquito habitat mapper:water source`), n_classes)
# Filtrar el data frame con las clases seleccionadas
data_filtered <- data_clea %>%
filter(`mosquito habitat mapper:water source` %in% random_classes)
# Crear tabla de contingencia entre 'genus' y 'water source'
tabla_contin <- table(data_filtered$`mosquito habitat mapper:genus`, data_filtered$`mosquito habitat mapper:water source`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contin) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_test <- fisher.test(tabla_contin, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_test <- chisq.test(tabla_contin)
}
# Almacenar el p-valor en el vector de p-valores
p_values[i] <- resultado_test$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_values)
print(paste("El promedio de p-valor obtenidos en las 20 pruebas es:", mean(p_values)))
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulations <- 20  # Número de simulaciones
n_classes <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_values <- numeric(n_simulations)  # Vector para almacenar los p-valores
for (i in 1:n_simulations) {
# Seleccionar aleatoriamente 5 clases de la columna 'water source'
random_classes <- sample(unique(data_clea$`mosquito habitat mapper:water source`), n_classes)
# Filtrar el data frame con las clases seleccionadas
data_filtered <- data_clea %>%
filter(`mosquito habitat mapper:water source` %in% random_classes)
# Crear tabla de contingencia entre 'genus' y 'water source'
tabla_contin <- table(data_filtered$`mosquito habitat mapper:genus`, data_filtered$`mosquito habitat mapper:water source`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contin) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_test <- fisher.test(tabla_contin, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_test <- chisq.test(tabla_contin)
}
# Almacenar el p-valor en el vector de p-valores
p_values[i] <- resultado_test$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_values)
print(paste("El promedio de p-valor obtenidos en las 20 pruebas es:", mean(p_values)))
# Filtrar datos donde el género sea 'Anopheles', 'Culex' o 'Aedes'
data_selected <- data_clea %>% filter(`mosquito habitat mapper:genus` %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"mosquito habitat mapper:water source",
"mosquito habitat mapper:water source type",
"mosquito habitat mapper:larvae count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
# Crear tablas de contingencia y realizar pruebas chi-cuadrado para variables categóricas
# Relación entre 'mosquito habitat mapper:genus' y otras columnas categóricas
results_generos <- list()
for (column in c("mosquito habitat mapper:water source", "mosquito habitat mapper:water source type")) {
contingency_table <- table(data_selected$`mosquito habitat mapper:genus`, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
# Obtener el valor del estadístico chi-cuadrado y el tamaño de la muestra
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
# Fin del bloque de código
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulations <- 20  # Número de simulaciones
p_values <- numeric(n_simulations)  # Vector para almacenar los p-valores
for (i in 1:n_simulations) {
# No se seleccionan categorías aleatoriamente, se toman todas las categorías de 'water source type'
# Crear tabla de contingencia entre 'genus' y 'water source type'
tabla_contin <- table(data_clea$`mosquito habitat mapper:genus`, data_clea$`mosquito habitat mapper:water source type`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contin) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_test <- fisher.test(tabla_contin, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_test <- chisq.test(tabla_contin)
}
# Almacenar el p-valor en el vector de p-valores
p_values[i] <- resultado_test$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_values)
# Imprimir el promedio de los p-valores
print(paste("El promedio de p-valor obtenidos en las 20 pruebas es:", mean(p_values)))
# Crear tabla de contingencia entre 'genus' y 'water source type'
tabla_contin <- table(data_clea$`mosquito habitat mapper:genus`, data_clea$`mosquito habitat mapper:water source type`)
# Usar la prueba de chi-cuadrado
resultado_test <- chisq.test(tabla_contin)
# Imprimir los resultados de la prueba chi-cuadrado
print(resultado_test)
# Crear tabla de contingencia entre 'genus' y 'water source type'
tabla_contin <- table(data_clea$`mosquito habitat mapper:genus`, data_clea$`mosquito habitat mapper:water source type`)
# Usar la prueba de chi-cuadrado
resultado_test <- chisq.test(tabla_contin)
# Imprimir los resultados de la prueba chi-cuadrado
print(resultado_test)
# Filtrar datos donde el género sea 'Anopheles', 'Culex' o 'Aedes'
data_selected <- data_clea %>% filter(`mosquito habitat mapper:genus` %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"mosquito habitat mapper:water source",
"mosquito habitat mapper:water source type",
"mosquito habitat mapper:larvae count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
# Crear tablas de contingencia y realizar pruebas chi-cuadrado para variables categóricas
# Relación entre 'mosquito habitat mapper:genus' y otras columnas categóricas
results_generos <- list()
for (column in c("mosquito habitat mapper:water source", "mosquito habitat mapper:water source type")) {
contingency_table <- table(data_selected$`mosquito habitat mapper:genus`, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
# Obtener el valor del estadístico chi-cuadrado y el tamaño de la muestra
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
# Fin del bloque de código
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(`mosquito habitat mapper:genus` %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"mosquito habitat mapper:water source",
"mosquito habitat mapper:water source type",
"mosquito habitat mapper:larvae count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
results_generos <- list()
for (column in c("mosquito habitat mapper:water source", "mosquito habitat mapper:water source type")) {
contingency_table <- table(data_selected$`mosquito habitat mapper:genus`, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
# Crear tabla de contingencia entre 'genus' y 'water source type'
tabla_contin <- table(data_clea$`mosquito habitat mapper:genus`, data_clea$`mosquito habitat mapper:water source type`)
# Usar la prueba de chi-cuadrado
resultado_test <- chisq.test(tabla_contin)
# Imprimir los resultados de la prueba chi-cuadrado
print(resultado_test)
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulaciones <- 20  # Número de simulaciones
n_clases <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_valores <- numeric(n_simulaciones)  # Vector para almacenar los p-valores
for (i in 1:n_simulaciones) {
# Seleccionar aleatoriamente 5 clases de la columna 'fuente de agua'
clases_aleatorias <- sample(unique(data_clea$`mosquito habitat mapper:water source`), n_clases)
# Filtrar el data frame con las clases seleccionadas
datos_filtrados <- data_clea %>%
filter(`mosquito habitat mapper:water source` %in% clases_aleatorias)
# Crear tabla de contingencia entre 'género' y 'fuente de agua'
tabla_contingencia <- table(datos_filtrados$`mosquito habitat mapper:genus`, datos_filtrados$`mosquito habitat mapper:water source`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contingencia) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_prueba <- fisher.test(tabla_contingencia, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_prueba <- chisq.test(tabla_contingencia)
}
# Almacenar el p-valor en el vector de p-valores
p_valores[i] <- resultado_prueba$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_valores)
# Imprimir el promedio de los p-valores
print(paste("El promedio de p-valor obtenidos en las 20 pruebas es:", mean(p_valores)))
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(`mosquito habitat mapper:genus` %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"mosquito habitat mapper:water source",
"mosquito habitat mapper:water source type",
"mosquito habitat mapper:larvae count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
results_generos <- list()
for (column in c("mosquito habitat mapper:water source", "mosquito habitat mapper:water source type")) {
contingency_table <- table(data_selected$`mosquito habitat mapper:genus`, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
View(GLOBEMeasurementData_21594)
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
#View(data_ori)
print(data_ori)
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
View(GLOBEMeasurementData_21594)
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("/data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("/data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("/data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("/data/GLOBEMeasurementData-21594.xlsx")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
library(readxl)
GLOBEMeasurementData_21594 <- read_excel("data/GLOBEMeasurementData-21594.xlsx")
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio/cod")
GLOBEMeasurementData_21594 <- read_excel("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio/data/GLOBEMeasurementData-21594.xlsx")
View(GLOBEMeasurementData_21594)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio/data/GLOBEMeasurementData-21594.xlsx")
#View(data_ori)
print(data_ori)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio/data/GLOBEMeasurementData-21594.xlsx")
#View(data_ori)
print(data_ori)
