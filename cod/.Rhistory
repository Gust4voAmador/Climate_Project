x = "Estado",
y = "Cantidad") +
theme_minimal(base_size = 15) +  # Tema minimalista con tamaño de texto ajustado
scale_fill_manual(values = c("false" = "#FF6666", "true" = "#66B2FF", "NA" = "#999999")) +  # Colores personalizados
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centrar y negrita para el título
axis.text = element_text(size = 12),  # Ajustar tamaño del texto en los ejes
axis.title = element_text(face = "bold"),  # Negrita para los títulos de los ejes
legend.position = "none"  # Eliminar la leyenda
)
#Hacer de que la columna sea un factor
data_clea$mosquito_adults <- as.factor(data_clea$mosquito_adults)
# Crear un gráfico de barras
ggplot(data_clea, aes(x = mosquito_adults, fill = mosquito_adults)) +
geom_bar(color = "black", width = 0.7) +  # Añadir borde negro y ajustar el ancho de las barras
geom_text(stat='count', aes(label = ..count..), position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Agregar etiquetas centradas
labs(title = "Registros con mosquitos adultos",
x = "Estado",
y = "Cantidad") +
theme_minimal(base_size = 15) +  # Tema minimalista con tamaño de texto ajustado
scale_fill_manual(values = c("false" = "#FF6666", "true" = "#66B2FF", "NA" = "#999999")) +  # Colores personalizados
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centrar y negrita para el título
axis.text = element_text(size = 12),  # Ajustar tamaño del texto en los ejes
axis.title = element_text(face = "bold"),  # Negrita para los títulos de los ejes
legend.position = "none"  # Eliminar la leyenda
)
# Histograma de la columna genus
ggplot(data_clea, aes(x = species)) +
geom_bar(fill = "steelblue") +
labs(title = "Histograma Género de Mosquito",
x = "Género",
y = "Cantidad") +
theme_minimal()
# Histograma de la columna species
ggplot(data_clea, aes(x = reorder(species, species, function(x)-length(x)))) +
geom_bar(fill = "tomato") +
coord_flip() +
labs(title = "Histograma Especie de Mosquito",
x = "Especie",
y = "Cantidad") +
theme_minimal()
# Histograma de la columna genus sin considerar NA
data_genus <- data_ori %>% filter(!is.na(genus))
# Histograma de la columna genus sin considerar NA
data_genus <- data_ori %>% filter(!is.na(genus))
# Histograma de la columna genus sin considerar NA
data_genus <- data_ori %>% filter(!is.na(`mosquito habitat mapper:genus`))
ggplot(data_genus, aes(x = `mosquito habitat mapper:genus`)) +
geom_bar(fill = "darkgreen") +
labs(title = "Histograma Género de Mosquito (sin NA)",
x = "Género",
y = "Cantidad") +
theme_minimal()
data_species <- data_ori %>% filter(!is.na(`mosquito habitat mapper:species`))
# Creando una visualización utilizando ggplot2 para explorar los datos
ggplot(data_species, aes(x = reorder(`mosquito habitat mapper:species`, `mosquito habitat mapper:species`, function(x)-length(x)))) +
geom_bar(fill = "purple") +
coord_flip() +
labs(title = "Histograma Especie de Mosquito (sin NA)",
x = "Especie",
y = "Cantidad") +
theme_minimal()
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulaciones <- 20  # Número de simulaciones
n_clases <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_valores <- numeric(n_simulaciones)  # Vector para almacenar los p-valores
for (i in 1:n_simulaciones) {
# Seleccionar aleatoriamente 5 clases de la columna 'fuente de agua'
clases_aleatorias <- sample(unique(data_clea$`mosquito habitat mapper:water source`), n_clases)
# Filtrar el data frame con las clases seleccionadas
datos_filtrados <- data_clea %>%
filter(`mosquito habitat mapper:water source` %in% clases_aleatorias)
# Crear tabla de contingencia entre 'género' y 'fuente de agua'
tabla_contingencia <- table(datos_filtrados$`mosquito habitat mapper:genus`, datos_filtrados$`mosquito habitat mapper:water source`)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contingencia) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_prueba <- fisher.test(tabla_contingencia, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_prueba <- chisq.test(tabla_contingencia)
}
# Almacenar el p-valor en el vector de p-valores
p_valores[i] <- resultado_prueba$p.value
}
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulaciones <- 20  # Número de simulaciones
n_clases <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_valores <- numeric(n_simulaciones)  # Vector para almacenar los p-valores
for (i in 1:n_simulaciones) {
# Seleccionar aleatoriamente 5 clases de la columna 'fuente de agua'
clases_aleatorias <- sample(unique(data_clea$water_source), n_clases)
# Filtrar el data frame con las clases seleccionadas
datos_filtrados <- data_clea %>%
filter(water_source %in% clases_aleatorias)
# Crear tabla de contingencia entre 'género' y 'fuente de agua'
tabla_contingencia <- table(datos_filtrados$`mosquito habitat mapper:genus`, datos_filtrados$water_source)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contingencia) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_prueba <- fisher.test(tabla_contingencia, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_prueba <- chisq.test(tabla_contingencia)
}
# Almacenar el p-valor en el vector de p-valores
p_valores[i] <- resultado_prueba$p.value
}
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulaciones <- 20  # Número de simulaciones
n_clases <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_valores <- numeric(n_simulaciones)  # Vector para almacenar los p-valores
for (i in 1:n_simulaciones) {
# Seleccionar aleatoriamente 5 clases de la columna 'fuente de agua'
clases_aleatorias <- sample(unique(data_clea$water_source), n_clases)
# Filtrar el data frame con las clases seleccionadas
datos_filtrados <- data_clea %>%
filter(water_source %in% clases_aleatorias)
# Crear tabla de contingencia entre 'género' y 'fuente de agua'
tabla_contingencia <- table(datos_filtrados$genus, datos_filtrados$water_source)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contingencia) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_prueba <- fisher.test(tabla_contingencia, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_prueba <- chisq.test(tabla_contingencia)
}
# Almacenar el p-valor en el vector de p-valores
p_valores[i] <- resultado_prueba$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_valores)
# Imprimir el promedio de los p-valores
print(paste("El promedio de p-valor obtenidos en las 20 pruebas es:", mean(p_valores)))
# Crear tabla de contingencia entre genus y water source type
tabla_contin <- table(data_clea$genus, data_clea$water_source_type)
# Usar la prueba de chi-cuadrado
resultado_test <- chisq.test(tabla_contin)
# Imprimir los resultados de la prueba chi-cuadrado
print(resultado_test)
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(genus %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"mosquito habitat mapper:water source",
"mosquito habitat mapper:water source type",
"mosquito habitat mapper:larvae count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(genus %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"mosquito habitat mapper:water source",
"mosquito habitat mapper:water source type",
"mosquito habitat mapper:larvae count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(genus %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"water_source",
"water_source_type",
"larvae_count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
results_generos <- list()
for (column in c("water_source", "water_source_type")) {
contingency_table <- table(data_selected$genus, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(genus %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"water_source",
"water_source_type",
"larvae_count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
results_generos <- list()
for (column in c("water_source", "water_source_type")) {
contingency_table <- table(data_selected$genus, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(genus %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"water_source",
"water_source_type",
"larvae_count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
results_generos <- list()
for (column in c("water_source", "water_source_type")) {
contingency_table <- table(data_selected$genus, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
View(data_clea)
data_clea$es_aedes <- ifelse(data_clea$`mosquito habitat mapper:genus` == "Aedes", 1, 0)
data_clea$es_aedes <- ifelse(data_clea$genus == "Aedes", 1, 0)
cor_aedes_latitud <- cor(data_clea$es_aedes, data_clea$latitude, use = "complete.obs")
cor_aedes_longitud <- cor(data_clea$es_aedes, data_clea$longitude, use = "complete.obs")
cor_aedes_elevacion <- cor(data_clea$es_aedes, data_clea$elevation, use = "complete.obs")
print(cor_aedes_latitud)
print(cor_aedes_longitud)
print(cor_aedes_elevacion)
data_clea$es_aedes <- ifelse(data_clea$genus == "Aedes", 1, 0)
cor_aedes_latitud <- cor(data_clea$es_aedes, data_clea$latitude, use = "complete.obs")
cor_aedes_longitud <- cor(data_clea$es_aedes, data_clea$longitude, use = "complete.obs")
cor_aedes_elevacion <- cor(data_clea$es_aedes, data_clea$elevation, use = "complete.obs")
print(cor_aedes_latitud)
print(cor_aedes_longitud)
print(cor_aedes_elevacion)
modelo_aedes <- glm(es_aedes ~ latitude + longitude + elevation, data = data_clea, family = binomial)
summary(modelo_aedes)
ggplot(data_clea, aes(x = factor(es_aedes), y = elevation)) +
geom_boxplot() +
labs(x = "Presencia de Aedes (0 = No, 1 = Sí)", y = "Elevación") +
theme_minimal()
ggplot(data_clea, aes(x = longitude, y = latitude, color = factor(es_aedes))) +
geom_point(alpha = 0.6) +
labs(color = "Presencia de Aedes (0 = No, 1 = Sí)") +
theme_minimal()
data_clea$es_aedes <- ifelse(data_clea$genus == "Aedes", 1, 0)
length(es_aedes)
data_clea$es_aedes <- ifelse(data_clea$genus == "Aedes", 1, 0)
length(data_clea$es_aedes)
cor_aedes_latitud <- cor(data_clea$es_aedes, data_clea$latitude, use = "complete.obs")
cor_aedes_longitud <- cor(data_clea$es_aedes, data_clea$longitude, use = "complete.obs")
cor_aedes_elevacion <- cor(data_clea$es_aedes, data_clea$elevation, use = "complete.obs")
print(cor_aedes_latitud)
print(cor_aedes_longitud)
print(cor_aedes_elevacion)
modelo_aedes <- glm(es_aedes ~ latitude + longitude + elevation, data = data_clea, family = binomial)
summary(modelo_aedes)
data_clea$es_aedes <- ifelse(data_clea$genus == "Aedes", 1, 0)
print(data_clea$es_aedes)
cor_aedes_latitud <- cor(data_clea$es_aedes, data_clea$latitude, use = "complete.obs")
cor_aedes_longitud <- cor(data_clea$es_aedes, data_clea$longitude, use = "complete.obs")
cor_aedes_elevacion <- cor(data_clea$es_aedes, data_clea$elevation, use = "complete.obs")
print(cor_aedes_latitud)
print(cor_aedes_longitud)
print(cor_aedes_elevacion)
modelo_aedes <- glm(es_aedes ~ latitude + longitude + elevation, data = data_clea, family = binomial)
summary(modelo_aedes)
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
print(df_geografico)
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
# Filtrar las filas sin NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
# Convertir la columna genero a una variable binaria (1 si es Aedes, 0 en otro caso)
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
# Calcular la correlación de Pearson entre Aedes y las columnas numericas
cor_latitud <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$latitud, use = "complete.obs")
cor_longitud <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$longitud, use = "complete.obs")
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
# Imprimir las correlaciones
print(paste("Correlación entre Aedes y latitud:", cor_latitud))
print(paste("Correlación entre Aedes y longitud:", cor_longitud))
print(paste("Correlación entre Aedes y elevación:", cor_elevacion))
# Cargar la librería necesaria
library(ggcorrplot)
install.packages("ggcorrplot")
# Cargar la librería necesaria
library(ggcorrplot)
# Seleccionar las columnas para la matriz de correlación
df_correlacion <- df_geografico_sin_na %>% select(aedes, latitud, longitud, elevacion)
# Calcular la matriz de correlación
matriz_correlacion <- cor(df_correlacion, use = "complete.obs")
# Visualizar la matriz de correlación con un heatmap
ggcorrplot(matriz_correlacion, method = "circle", lab = TRUE, title = "Matriz de Correlación entre Aedes y Variables Geográficas")
# Cargar la librería GGally
library(GGally)
install.packages(GGally)
install.packages("GGally")
# Cargar la librería GGally
library(GGally)
# Crear un gráfico de pares para las variables
ggpairs(df_correlacion, title = "Gráfico de Pares para Aedes y Variables Geográficas")
# Cargar la librería GGally
library(GGally)
# Crear un gráfico de pares para las variables
ggpairs(df_correlacion, title = "Gráfico de Pares para Aedes y Variables Geográficas")
# Crear un DataFrame con las columnas de interes
# Genero, Latitud, Longitud, Elevacion
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
# Filtrar las filas sin NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
# Convertir la columna genero a una variable binaria (1 si es Aedes, 0 en otro caso)
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
# Calcular la correlacion de Pearson entre Aedes y las columnas numericas
cor_latitud <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$latitud, use = "complete.obs")
cor_longitud <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$longitud, use = "complete.obs")
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
# Imprimir las correlaciones
print(paste("Correlacion entre Aedes y latitud:", cor_latitud))
print(paste("Correlacion entre Aedes y longitud:", cor_longitud))
print(paste("Correlacion entre Aedes y elevacion:", cor_elevacion))
# Crear una nueva variable con las coordenadas combinadas
df_geografico_sin_na$coordenadas <- paste(df_geografico_sin_na$latitud, df_geografico_sin_na$longitud, sep = ",")
# Análisis de clustering usando k-means
library(stats)
coords <- df_geografico_sin_na[, c("latitud", "longitud")]
kmeans_result <- kmeans(coords, centers = 3) # Agrupar en 3 clusters
df_geografico_sin_na$cluster <- kmeans_result$cluster
# Modelo de regresion logistica para la probabilidad de presencia de Aedes
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
# Calcular distancia a un punto de referencia (ej. centro de una ciudad)
library(geosphere)
install.packages("geosphere")
# Crear un DataFrame con las columnas de interes
# Genero, Latitud, Longitud, Elevacion
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
# Filtrar las filas sin NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
# Convertir la columna genero a una variable binaria (1 si es Aedes, 0 en otro caso)
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
# Calcular la correlacion de Pearson entre Aedes y las columnas numericas
cor_latitud <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$latitud, use = "complete.obs")
cor_longitud <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$longitud, use = "complete.obs")
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
# Imprimir las correlaciones
print(paste("Correlacion entre Aedes y latitud:", cor_latitud))
print(paste("Correlacion entre Aedes y longitud:", cor_longitud))
print(paste("Correlacion entre Aedes y elevacion:", cor_elevacion))
# Crear una nueva variable con las coordenadas combinadas
df_geografico_sin_na$coordenadas <- paste(df_geografico_sin_na$latitud, df_geografico_sin_na$longitud, sep = ",")
# Análisis de clustering usando k-means
library(stats)
coords <- df_geografico_sin_na[, c("latitud", "longitud")]
kmeans_result <- kmeans(coords, centers = 3) # Agrupar en 3 clusters
df_geografico_sin_na$cluster <- kmeans_result$cluster
# Modelo de regresion logistica para la probabilidad de presencia de Aedes
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
# Calcular distancia a un punto de referencia (ej. centro de una ciudad)
library(geosphere)
punto_referencia <- c(-84.091, 9.928) # (longitud, latitud)
df_geografico_sin_na$distancia <- distHaversine(cbind(df_geografico_sin_na$longitud, df_geografico_sin_na$latitud), punto_referencia)
# Ver la correlacion entre la distancia al punto de referencia y la presencia de Aedes
cor_distancia <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$distancia, use = "complete.obs")
print(paste("Correlacion entre Aedes y distancia al punto de referencia:", cor_distancia))
# Visualizar con un mapa de calor
library(ggplot2)
ggplot(df_geografico_sin_na, aes(x = longitud, y = latitud)) +
geom_bin2d(bins = 30) +
theme_minimal() +
labs(title = "Mapa de Calor de Presencia de Aedes", x = "Longitud", y = "Latitud")
# Instalar y cargar libreria GGally para el grafico de pares
# install.packages("GGally") # Descomentar si no esta instalada
library(GGally)
# Crear un grafico de pares para las variables de interes
ggpairs(df_geografico_sin_na[, c("aedes", "latitud", "longitud", "elevacion")], title = "Grafico de Pares para Aedes y Variables Geograficas")
# Crear un DataFrame con las columnas de interes
# Genero, Latitud, Longitud, Elevacion
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
# Filtrar las filas sin NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
# Convertir la columna genero a una variable binaria (1 si es Aedes, 0 en otro caso)
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
# Calcular la correlacion de Pearson entre Aedes y las coordenadas (latitud y longitud) conjuntamente
df_geografico_sin_na$coord_pair <- df_geografico_sin_na$latitud * df_geografico_sin_na$longitud
cor_coord_pair <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$coord_pair, use = "complete.obs")
# Calcular la correlacion de Pearson entre Aedes y la elevacion
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
# Imprimir las correlaciones
print(paste("Correlacion entre Aedes y coordenadas (latitud * longitud):", cor_coord_pair))
print(paste("Correlacion entre Aedes y elevacion:", cor_elevacion))
# Crear una nueva variable con las coordenadas combinadas
df_geografico_sin_na$coordenadas <- paste(df_geografico_sin_na$latitud, df_geografico_sin_na$longitud, sep = ",")
# Análisis de clustering usando k-means
library(stats)
coords <- df_geografico_sin_na[, c("latitud", "longitud")]
kmeans_result <- kmeans(coords, centers = 3) # Agrupar en 3 clusters
df_geografico_sin_na$cluster <- kmeans_result$cluster
# Modelo de regresion logistica para la probabilidad de presencia de Aedes
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
# Calcular distancia a un punto de referencia (ej. centro de una ciudad)
library(geosphere)
punto_referencia <- c(-84.091, 9.928) # (longitud, latitud)
df_geografico_sin_na$distancia <- distHaversine(cbind(df_geografico_sin_na$longitud, df_geografico_sin_na$latitud), punto_referencia)
# Ver la correlacion entre la distancia al punto de referencia y la presencia de Aedes
cor_distancia <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$distancia, use = "complete.obs")
print(paste("Correlacion entre Aedes y distancia al punto de referencia:", cor_distancia))
# Visualizar con un mapa de calor
library(ggplot2)
ggplot(df_geografico_sin_na, aes(x = longitud, y = latitud)) +
geom_bin2d(bins = 30) +
theme_minimal() +
labs(title = "Mapa de Calor de Presencia de Aedes", x = "Longitud", y = "Latitud")
# Instalar y cargar libreria GGally para el grafico de pares
# install.packages("GGally") # Descomentar si no esta instalada
library(GGally)
# Crear un grafico de pares para las variables de interes
ggpairs(df_geografico_sin_na[, c("aedes", "latitud", "longitud", "elevacion")], title = "Grafico de Pares para Aedes y Variables Geograficas")
# Crear un DataFrame con las columnas de interes
# Genero, Latitud, Longitud, Elevacion
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
# Filtrar las filas sin NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
# Convertir la columna genero a una variable binaria (1 si es Aedes, 0 en otro caso)
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
# Calcular la correlacion de Pearson entre Aedes y las coordenadas (latitud y longitud) conjuntamente
df_geografico_sin_na$coord_pair <- df_geografico_sin_na$latitud * df_geografico_sin_na$longitud
cor_coord_pair <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$coord_pair, use = "complete.obs")
# Calcular la correlacion de Pearson entre Aedes y la elevacion
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
# Imprimir las correlaciones
print(paste("Correlacion entre Aedes y coordenadas (latitud * longitud):", cor_coord_pair))
print(paste("Correlacion entre Aedes y elevacion:", cor_elevacion))
# Crear una nueva variable con las coordenadas combinadas
df_geografico_sin_na$coordenadas <- paste(df_geografico_sin_na$latitud, df_geografico_sin_na$longitud, sep = ",")
# Análisis de clustering usando k-means
library(stats)
coords <- df_geografico_sin_na[, c("latitud", "longitud")]
kmeans_result <- kmeans(coords, centers = 3) # Agrupar en 3 clusters
df_geografico_sin_na$cluster <- kmeans_result$cluster
# Modelo de regresion logistica para la probabilidad de presencia de Aedes
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
# Crear un DataFrame con las columnas de interes
# Genero, Latitud, Longitud, Elevacion
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
# Filtrar las filas sin NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
# Convertir la columna genero a una variable binaria (1 si es Aedes, 0 en otro caso)
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
# Calcular la correlacion de Pearson entre Aedes y las coordenadas (latitud y longitud) conjuntamente
df_geografico_sin_na$coord_pair <- df_geografico_sin_na$latitud * df_geografico_sin_na$longitud
cor_coord_pair <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$coord_pair, use = "complete.obs")
# Calcular la correlacion de Pearson entre Aedes y la elevacion
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
# Imprimir las correlaciones
print(paste("Correlacion entre Aedes y coordenadas (latitud * longitud):", cor_coord_pair))
print(paste("Correlacion entre Aedes y elevacion:", cor_elevacion))
# Crear una nueva variable con las coordenadas combinadas
df_geografico_sin_na$coordenadas <- paste(df_geografico_sin_na$latitud, df_geografico_sin_na$longitud, sep = ",")
# Análisis de clustering usando k-means
library(stats)
coords <- df_geografico_sin_na[, c("latitud", "longitud")]
kmeans_result <- kmeans(coords, centers = 3) # Agrupar en 3 clusters
df_geografico_sin_na$cluster <- kmeans_result$cluster
# Modelo de regresion logistica para la probabilidad de presencia de Aedes
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
# Crear una nueva variable con las coordenadas combinadas
df_geografico_sin_na$coordenadas <- paste(df_geografico_sin_na$latitud, df_geografico_sin_na$longitud, sep = ",")
# Modelo de regresion logistica para la probabilidad de presencia de Aedes
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
# Crear una nueva variable con las coordenadas combinadas
# Modelo de regresion logistica para la probabilidad de presencia de Aedes
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
#Crear un DataFrame con las columnas de interes
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
#Imputar filas con NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
#columna genero a una variable binaria
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
#la correlacion de Pearson entre Aedes y las coordenadas (latitud y longitud) conjuntamente
df_geografico_sin_na$coord_pair <- df_geografico_sin_na$latitud * df_geografico_sin_na$longitud
cor_coord_pair <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$coord_pair, use = "complete.obs")
#la correlacion de Pearson entre Aedes y la elevacion
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
print(paste("Correlacion entre Aedes y coordenadas (latitud * longitud):", cor_coord_pair))
print(paste("Correlacion entre Aedes y elevacion:", cor_elevacion))
