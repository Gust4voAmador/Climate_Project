labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 500)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
data_clea <- data_ori[-1, ]
data_clea <- data_ori[-1, ]
print(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
print(data_clea)
colnames(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
print(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
print(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
df <- df %>% select(- "air temps:comments", -"air temps:globe teams")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/data/Air_temperature/GLOBEMeasurementData-22014.csv")
View(data_ori)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
df <- df %>% select(- "air temps:comments", -"air temps:globe teams")
colnames(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
df <- df %>% select(- "air temps:comments", -"air temps:globe teams")
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
library(dplyr)
# Eliminar columnas que no aportan información
df <- df %>% select(- "air temps:comments", -"air temps:globe teams")
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
print(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
print(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
head(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("air_temps:userid" = "air temps:userid", "air_temps:measured_at" = "air temps:measured at","air_temps:solar_measured_at" = "air temps:solar measured at", "air_temps:current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`air_temps:solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`air_temps:solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
head(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`air_temps:solar_measured_at`) # Crear columna de fecha
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`air_temps:solar_measured_at`) # Crear columna de fecha
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
head(data_clea)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$fecha_measured_at <- as.Date(data_clea$`measured_at`) # Crear columna de fecha
data_clea$`hora_measured_at` <- format(data_clea$`measured_at`, format = "%H:%M:%S") # Crear columna de hora
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
head(data_clea)
# Cargando una librería para utilizar funciones específicas
# Filtrar datos para que solo incluya elevaciones mayores que 0
data_filtered <- data_ori[as.numeric(data_ori$elevation) > 0, ]
# Crear un histograma usando ggplot con ancho de barra de 500
# Creando una visualización utilizando ggplot2 para explorar los datos
ggplot(data_filtered, aes(x = elevation)) +
geom_histogram(binwidth = 500, fill = "blue", color = "black") +  # Ancho de barra ajustado a 500
labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 500)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
# Cargando una librería para utilizar funciones específicas
# Filtrar datos para que solo incluya elevaciones mayores que 0
data_filtered <- data_clea[as.numeric(data_clea$elevation) > 0, ]
# Crear un histograma usando ggplot con ancho de barra de 500
# Creando una visualización utilizando ggplot2 para explorar los datos
ggplot(data_filtered, aes(x = elevation)) +
geom_histogram(binwidth = 500, fill = "blue", color = "black") +  # Ancho de barra ajustado a 500
labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 500)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
# Fin del bloque de código
# Cargando una librería para utilizar funciones específicas
# Filtrar datos para que solo incluya elevaciones mayores que 0
data_filtered <- data_clea[as.numeric(data_clea$elevation) > 0, ]
# Crear un histograma usando ggplot con ancho de barra de 500
# Creando una visualización utilizando ggplot2 para explorar los datos
ggplot(data_filtered, aes(x = elevation)) +
geom_histogram(binwidth = 250, fill = "blue", color = "black") +  # Ancho de barra ajustado a 500
labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 250)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
# Fin del bloque de código
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(readxl)
library(dplyr)
library(ggplot2)
#Llamar datos
data_ori <- read_excel("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Análisis exploratorio/data/GLOBEMeasurementData-21594.xlsx")
View(data_ori)
print(data_ori)
# Convertir la columna a un factor
data_clea$current_temp_C <- as.factor(data_clea$data_clea$current_temp_C)
# Convertir la columna a un factor
data_clea$water_source_type <- as.factor(data_clea$water_source_type)
# Convertir la columna a un factor
data_clea$current_temp_C <- as.factor(data_clea$data_clea$current_temp_C)
# Convertir la columna a un factor
data_clea$current_temp_C <- as.factor(data_clea$current_temp_C)
# Crear el gráfico de barras
ggplot(data_clea, aes(x = current_temp_C)) +
geom_bar(fill = "blue", color = "black") +  # Gráfico de barras de cantidad
labs(title = "Histograma Temperatura del Aire",
x = "Temperatura (°C)",
y = "Cantidad") +
theme_minimal()  # Estilo minimalista
# Convertir la columna a numérica si es necesario
data_clea$current_temp_C <- as.numeric(as.character(data_clea$current_temp_C))
# Crear el histograma con ancho de barra de 1
ggplot(data_clea, aes(x = current_temp_C)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Ancho de barra ajustado a 1
labs(title = "Histograma Temperatura del Aire",
x = "Temperatura (°C)",
y = "Frecuencia") +
theme_minimal()  # Estilo minimalista
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$fecha_measured_at <- as.Date(data_clea$`measured_at`) # Crear columna de fecha
data_clea$`hora_measured_at` <- format(data_clea$`measured_at`, format = "%H:%M:%S") # Crear columna de hora
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
head(data_clea)
View(data_clea)
install.packages("hms")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Convertir la columna de horas a formato hms
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$hora_solar_measured_at)
ggplot(data, aes(x = hora_solar_measured_at, y = otra_variable)) +
geom_point() +  # Cambia a geom_line() si prefieres una línea
labs(title = "Variable en función de la Hora",
x = "Hora del día",
y = "Otra variable") +
theme_minimal()
library(hms)
ggplot(data_clea, aes(x = hora_solar_measured_at, y = current_temp_C)) +
geom_point() +
labs(title = "Temperatura en función de la Hora",
x = "Hora del día",
y = "Temperatura (°C)") +
theme_minimal()
library(hms)
ggplot(data_clea, aes(x = hora_solar_measured_at)) +
geom_histogram(binwidth = 60*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
library(hms)
ggplot(data_clea, aes(x = hora_solar_measured_at)) +
geom_histogram(binwidth = 30*30, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
library(hms)
ggplot(data_clea, aes(x = hora_solar_measured_at)) +
geom_histogram(binwidth = 30*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
library(hms)
ggplot(data_clea, aes(x = hora_solar_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
library(hms)
ggplot(data_clea, aes(x = hora_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
ggplot(data_clea, aes(x = hora_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
# Cambiar formato de la varibale
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$hora_solar_measured_at)
ggplot(data_clea, aes(x = hora_solar_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
# Cambiar formato de la varibale
data_clea$hora_measured_at <- hms::as_hms(data_clea$hora_measured_at)
ggplot(data_clea, aes(x = hora_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
# Graficar la frecuencia de observaciones por fecha
ggplot(data_clea, aes(x = fecha_measured_at)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Cada barra representa 1 día
labs(title = "Frecuencia de Observaciones por Fecha",
x = "Fecha",
y = "Frecuencia") +
theme_minimal()
# Graficar la frecuencia de observaciones por fecha
ggplot(data_clea, aes(x = fecha_measured_at)) +
geom_histogram(binwidth = 30, fill = "blue", color = "black") +  # Cada barra representa 1 día
labs(title = "Frecuencia de Observaciones por Fecha",
x = "Fecha",
y = "Frecuencia") +
theme_minimal()
# Convertir `hora_solar_measured_at` a formato hms (si aún no lo está)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$hora_solar_measured_at)
# Convertir `hora_solar_measured_at` a horas decimales
data_clea$hora_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Calcular la correlación
correlacion <- cor(data_clea$current_temp_C, data_clea$hora_decimal, use = "complete.obs")
# Asegúrate de que current_temp_C esté en formato numérico
data_clea$current_temp_C <- as.numeric(as.character(data_clea$current_temp_C))
# Convertir `hora_solar_measured_at` a formato hms (si aún no lo está)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$hora_solar_measured_at)
# Convertir `hora_solar_measured_at` a horas decimales
data_clea$hora_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Calcular la correlación
correlacion <- cor(data_clea$current_temp_C, data_clea$hora_decimal, use = "complete.obs")
correlacion
# Gráfico de dispersión entre temperatura y hora decimal
ggplot(data_clea, aes(x = hora_decimal, y = current_temp_C)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Línea de regresión
labs(title = "Relación entre Temperatura y Hora Solar",
x = "Hora del Día (decimal)",
y = "Temperatura (°C)") +
theme_minimal()
# Convertir `hora_measured_at` y `hora_solar_measured_at` a formato hms si aún no lo están
library(hms)
data_clea$hora_measured_at <- hms::as_hms(data_clea$measured_at)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir `hora_measured_at` y `hora_solar_measured_at` a horas decimales
data_clea$hora_measured_decimal <- as.numeric(data_clea$hora_measured_at) / 3600
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_measured_decimal", "hora_solar_decimal")]
# Calcular la matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
cor_matrix
# Instalar y cargar el paquete corrplot si es necesario
library(corrplot)
# Visualizar la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$fecha_measured_at <- as.Date(data_clea$`measured_at`) # Crear columna de fecha
data_clea$`hora_measured_at` <- format(data_clea$`measured_at`, format = "%H:%M:%S") # Crear columna de hora
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
head(data_clea)
View(data_clea)
# Asegúrate de que las columnas de longitud y latitud son numéricas
data_ori$longitude <- as.numeric(data_ori$longitude)
data_ori$latitude <- as.numeric(data_ori$latitude)
# Crear un mapa interactivo
leaflet(data_ori) %>%
addTiles() %>%  # Mapa base
addCircles(
lng = ~longitude,
lat = ~latitude,
color = "blue",  # Color de los círculos
radius = 50,  # Ajusta el tamaño del círculo según sea necesario
fillOpacity = 0.5,
stroke = FALSE
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "blue", domain = data_ori$longitude),  # Usa valores de longitud como dominio
values = data_clea$longitude,  # Usa los mismos valores para la leyenda
title = "Puntos")
#print(as.numeric(data_ori$elevation))
length(data_ori$elevation)
# Cargando una librería para utilizar funciones específicas
# Filtrar datos para que solo incluya elevaciones mayores que 0
data_filtered <- data_clea[as.numeric(data_clea$elevation) > 0, ]
# Crear un histograma usando ggplot con ancho de barra de 500
# Creando una visualización utilizando ggplot2 para explorar los datos
ggplot(data_filtered, aes(x = elevation)) +
geom_histogram(binwidth = 250, fill = "blue", color = "black") +  # Ancho de barra ajustado a 500
labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 250)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
# Fin del bloque de código
# Convertir la columna a numérica si es necesario
data_clea$current_temp_C <- as.numeric(as.character(data_clea$current_temp_C))
# Crear el histograma con ancho de barra de 1
ggplot(data_clea, aes(x = current_temp_C)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Ancho de barra ajustado a 1
labs(title = "Histograma Temperatura del Aire",
x = "Temperatura (°C)",
y = "Frecuencia") +
theme_minimal()  # Estilo minimalista
# Cambiar formato de la varibale
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$hora_solar_measured_at)
ggplot(data_clea, aes(x = hora_solar_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
# Cambiar formato de la varibale
data_clea$hora_measured_at <- hms::as_hms(data_clea$hora_measured_at)
ggplot(data_clea, aes(x = hora_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
# Graficar la frecuencia de observaciones por fecha
ggplot(data_clea, aes(x = fecha_measured_at)) +
geom_histogram(binwidth = 30, fill = "blue", color = "black") +  # Cada barra representa 1 día
labs(title = "Frecuencia de Observaciones por Fecha",
x = "Fecha",
y = "Frecuencia") +
theme_minimal()
# Convertir `hora_measured_at` y `hora_solar_measured_at` a formato hms si aún no lo están
data_clea$hora_measured_at <- hms::as_hms(data_clea$measured_at)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir `hora_measured_at` y `hora_solar_measured_at` a horas decimales
data_clea$hora_measured_decimal <- as.numeric(data_clea$hora_measured_at) / 3600
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_measured_decimal", "hora_solar_decimal")]
# Calcular la matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
cor_matrix
# Instalar y cargar el paquete corrplot si es necesario
# Visualizar la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# Convertir las varibles hora a formato hms
data_clea$hora_measured_at <- hms::as_hms(data_clea$measured_at)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir ahora las variables hora a decimales
data_clea$hora_measured_decimal <- as.numeric(data_clea$hora_measured_at) / 3600
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_measured_decimal", "hora_solar_decimal")]
# La matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
cor_matrix
# Visualizar la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
