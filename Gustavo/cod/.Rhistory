"pool" = "Piscina",
"animal trough or water bowl" = "Bebedero",
"estuary" = "Estuario",
"puddle, vehicle or animal tracks" = "Charcos y huellas",
"ovitrap" = "Ovitrap",
"rain gutter or other architectural feature" = "Canalón",
"lake" = "Lago",
"adult mosquito trap" = "Trampa mosquitos",
"old car or boat" = "Auto/barco viejo",
"public works - culvert, bridge, road" = "Obras públicas",
"bay or ocean" = "Bahía u océano",
"refrigerator drainage" = "Drenaje refrigerador"
))
# Definir los colores para cada clase usando códigos hexadecimales
colores <- c("Pantano o humedal" = "#1f77b4",  # blue
"Lata o botella" = "#2ca02c",    # green
"Grupo plantas" = "#d62728",     # red
"Maceta" = "#ff7f0e",            # orange
"Zanja" = "#9467bd",             # purple
"Neumático" = "#8c564b",         # brown
"Otro" = "#e377c2",              # pink
"Tanque" = "#17becf",            # cyan
"Charcos y huellas" = "#7f7f7f", # gray
"Plato o olla" = "#bcbd22",      # yellow
"Cáscara planta" = "#7f7f7f",    # gray
"Basurero" = "#000000",          # black
"Fuente" = "#000080",            # navy
"Pozo o cisterna" = "#a0ff00",   # lime
"Frasco" = "#ff7f50",            # coral
"Estanque" = "#87cefa",          # lightblue
"Huecos en árboles" = "#006400", # darkgreen
"Charca junto a río" = "#008080",# teal
"Reservorio" = "#fa8072",        # salmon
"Parrilla" = "#ee82ee",          # violet
"Desecho: otro" = "#ffd700",     # gold
"Caparazón animal" = "#ff8c00",  # darkorange
"Piscina" = "#dda0dd",           # plum
"Bebedero" = "#f0e68c",          # khaki
"Estuario" = "#483d8b",          # darkslateblue
"Ovitrap" = "#90ee90",           # lightgreen
"Canalón" = "#d3d3d3",           # lightgray
"Lago" = "#da70d6",              # orchid
"Trampa mosquitos" = "#ff4500",  # red3
"Auto/barco viejo" = "#d2b48c",  # tan
"Obras públicas" = "#a0522d",    # sienna
"Bahía u océano" = "#87ceeb",     # skyblue
"Drenaje refrigerador" = "#32cd32" # limegreen
)
data_clea <- data_clea %>%
mutate(water_source_type = recode(water_source_type,
"still: lake/pond/swamp" = "Pantano/humedal",
"container: natural" = "Cont.natural",
"container: artificial" = "Cont. artificial",
"flowing: still water found next to river or stream" = "Agua estancada de rio/arroyo", ))
# Asegúrate de que las columnas de longitud y latitud son numéricas
data_clea$longitude <- as.numeric(data_clea$longitude)
data_clea$latitude <- as.numeric(data_clea$latitude)
# Crear un mapa interactivo
leaflet(data_clea) %>%
addTiles() %>%  # Mapa base
addCircles(
lng = ~longitude,
lat = ~latitude,
color = "blue",  # Color de los círculos
radius = 50,  # Ajusta el tamaño del círculo según sea necesario
fillOpacity = 0.5,
stroke = FALSE
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "blue", domain = data_clea$longitude),  # Usa valores de longitud como dominio
values = data_clea$longitude,  # Usa los mismos valores para la leyenda
title = "Puntos")
# Cargando una librería para utilizar funciones específicas
# Filtrar datos para que solo incluya elevaciones mayores que 0
data_filtered <- data_clea[data_clea$elevation > 0, ]
# Crear un histograma usando ggplot con ancho de barra de 500
# Creando una visualización utilizando ggplot2 para explorar los datos
ggplot(data_filtered, aes(x = elevation)) +
geom_histogram(binwidth = 500, fill = "blue", color = "black") +  # Ancho de barra ajustado a 500
labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 500)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
# Fin del bloque de código
# Convertir la columna a un factor
data_clea$water_source_type <- as.factor(data_clea$water_source_type)
ggplot(data_clea, aes(x = water_source_type)) +
geom_bar(fill = "blue", color = "black") +  # Gráfico de barras de cantidad
labs(title = "Histograma Tipos de Fuente de Agua",
x = "Tipo de Fuente de Agua",
y = "Cantidad") +
theme_minimal()  # Estilo minimalista
#Ver los porcentajes que representa cada observación
percentages <- prop.table(table(data_clea$`mosquito habitat mapper:water source type`)) * 100
print(percentages)
ggplot(data_clea, aes(x = water_source, fill = water_source)) +
geom_bar(color = "black") +  # Gráfico de barras de cantidad
# geom_text(stat='count', aes(label = ..count..), position = position_stack(vjust = 0.5), color = "white") +  # Agregar etiquetas de cantidad
labs(title = "Observaciones de Fuentes de Agua",
x = "Fuentes de Agua",
y = "Cantidad") +
scale_fill_manual(values = colores) +  # Usar el vector de colores definido
theme_minimal() +  # Estilo minimalista
theme(axis.text.x = element_blank())  # Ocultar etiquetas del eje x
# Hacer que la columna sea un factor
data_clea$mosquito_pupae <- as.factor(data_clea$mosquito_pupae)
# Crear un gráfico de barras
ggplot(data_clea, aes(x = mosquito_pupae, fill = mosquito_pupae)) +
geom_bar(color = "black", width = 0.7) +  # Añadir borde negro y ajustar el ancho de las barras
geom_text(stat='count', aes(label = ..count..), position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Agregar etiquetas centradas
labs(title = "Registros con pupas",
x = "Estado",
y = "Cantidad") +
theme_minimal(base_size = 15) +  # Tema minimalista con tamaño de texto ajustado
scale_fill_manual(values = c("false" = "#FF6666", "true" = "#66B2FF", "NA" = "#999999")) +  # Colores personalizados
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centrar y negrita para el título
axis.text = element_text(size = 12),  # Ajustar tamaño del texto en los ejes
axis.title = element_text(face = "bold"),  # Negrita para los títulos de los ejes
legend.position = "none"  # Eliminar la leyenda
)
#Hacer de que la columna sea un factor
data_clea$mosquito_eggs <- as.factor(data_clea$mosquito_eggs)
# Crear un gráfico de barras
ggplot(data_clea, aes(x = mosquito_eggs, fill = mosquito_eggs)) +
geom_bar(color = "black", width = 0.7) +  # Añadir borde negro y ajustar el ancho de las barras
geom_text(stat='count', aes(label = ..count..), position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Agregar etiquetas centradas
labs(title = "Registros con huevos",
x = "Estado",
y = "Cantidad") +
theme_minimal(base_size = 15) +  # Tema minimalista con tamaño de texto ajustado
scale_fill_manual(values = c("false" = "#FF6666", "true" = "#66B2FF", "NA" = "#999999")) +  # Colores personalizados
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centrar y negrita para el título
axis.text = element_text(size = 12),  # Ajustar tamaño del texto en los ejes
axis.title = element_text(face = "bold"),  # Negrita para los títulos de los ejes
legend.position = "none"  # Eliminar la leyenda
)
#Hacer de que la columna sea un factor
data_clea$mosquito_adults <- as.factor(data_clea$mosquito_adults)
# Crear un gráfico de barras
ggplot(data_clea, aes(x = mosquito_adults, fill = mosquito_adults)) +
geom_bar(color = "black", width = 0.7) +  # Añadir borde negro y ajustar el ancho de las barras
geom_text(stat='count', aes(label = ..count..), position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Agregar etiquetas centradas
labs(title = "Registros con mosquitos adultos",
x = "Estado",
y = "Cantidad") +
theme_minimal(base_size = 15) +  # Tema minimalista con tamaño de texto ajustado
scale_fill_manual(values = c("false" = "#FF6666", "true" = "#66B2FF", "NA" = "#999999")) +  # Colores personalizados
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centrar y negrita para el título
axis.text = element_text(size = 12),  # Ajustar tamaño del texto en los ejes
axis.title = element_text(face = "bold"),  # Negrita para los títulos de los ejes
legend.position = "none"  # Eliminar la leyenda
)
# Histograma de la columna genus
ggplot(data_clea, aes(x = species)) +
geom_bar(fill = "steelblue") +
labs(title = "Histograma Género de Mosquito",
x = "Género",
y = "Cantidad") +
theme_minimal()
# Histograma de la columna species
ggplot(data_clea, aes(x = reorder(species, species, function(x)-length(x)))) +
geom_bar(fill = "tomato") +
coord_flip() +
labs(title = "Histograma Especie de Mosquito",
x = "Especie",
y = "Cantidad") +
theme_minimal()
# Histograma de la columna genus sin considerar NA
data_genus <- data_ori %>% filter(!is.na(`mosquito habitat mapper:genus`))
ggplot(data_genus, aes(x = `mosquito habitat mapper:genus`)) +
geom_bar(fill = "darkgreen") +
labs(title = "Histograma Género de Mosquito (sin NA)",
x = "Género",
y = "Cantidad") +
theme_minimal()
data_species <- data_ori %>% filter(!is.na(`mosquito habitat mapper:species`))
# Creando una visualización utilizando ggplot2 para explorar los datos
ggplot(data_species, aes(x = reorder(`mosquito habitat mapper:species`, `mosquito habitat mapper:species`, function(x)-length(x)))) +
geom_bar(fill = "purple") +
coord_flip() +
labs(title = "Histograma Especie de Mosquito (sin NA)",
x = "Especie",
y = "Cantidad") +
theme_minimal()
set.seed(123)  # Fijar la semilla para reproducibilidad
n_simulaciones <- 20  # Número de simulaciones
n_clases <- 5  # Número de clases a seleccionar aleatoriamente en cada simulación
p_valores <- numeric(n_simulaciones)  # Vector para almacenar los p-valores
for (i in 1:n_simulaciones) {
# Seleccionar aleatoriamente 5 clases de la columna 'fuente de agua'
clases_aleatorias <- sample(unique(data_clea$water_source), n_clases)
# Filtrar el data frame con las clases seleccionadas
datos_filtrados <- data_clea %>%
filter(water_source %in% clases_aleatorias)
# Crear tabla de contingencia entre 'género' y 'fuente de agua'
tabla_contingencia <- table(datos_filtrados$genus, datos_filtrados$water_source)
# Usar prueba chi-cuadrado o prueba exacta de Fisher dependiendo de los conteos
if (min(tabla_contingencia) < 5) {
# Usar prueba exacta de Fisher con simulación Monte Carlo si hay conteos bajos
resultado_prueba <- fisher.test(tabla_contingencia, simulate.p.value = TRUE, B = 10000)
} else {
# Usar prueba chi-cuadrado si los conteos son suficientes
resultado_prueba <- chisq.test(tabla_contingencia)
}
# Almacenar el p-valor en el vector de p-valores
p_valores[i] <- resultado_prueba$p.value
}
# Imprimir los p-valores de las 20 simulaciones
print(p_valores)
# Imprimir el promedio de los p-valores
print(paste("El promedio de p-valor obtenidos en las 20 pruebas es:", mean(p_valores)))
# Crear tabla de contingencia entre genus y water source type
tabla_contin <- table(data_clea$genus, data_clea$water_source_type)
# Usar la prueba de chi-cuadrado
resultado_test <- chisq.test(tabla_contin)
# Imprimir los resultados de la prueba chi-cuadrado
print(resultado_test)
# Filtrar datos donde el género sean los principales
data_selected <- data_clea %>% filter(genus %in% c("Anopheles", "Culex", "Aedes"))
# Seleccionar columnas relevantes para el análisis
relevant_columns <- c(
"water_source",
"water_source_type",
"larvae_count",
"elevation"
)
data_selected_relevant <- data_selected %>% select(all_of(relevant_columns)) %>% na.omit()
results_generos <- list()
for (column in c("water_source", "water_source_type")) {
contingency_table <- table(data_selected$genus, data_selected[[column]])
chi_result <- chisq.test(contingency_table)
results_generos[[column]] <- list(chi2 = chi_result$statistic, p_value = chi_result$p.value)
}
chi_squared <- chi_result$statistic
N <- sum(contingency_table)
# Obtener el número de filas y columnas de la tabla de contingencia
n_filas <- nrow(contingency_table)
n_columnas <- ncol(contingency_table)
k <- min(n_filas, n_columnas)
# Calcular V de Cramer
V_cramer <- sqrt(chi_squared / (N * (k - 1)))
# Imprimir V de Cramer con un mensaje claro
print(paste("V de Cramer:", V_cramer))
#Crear un DataFrame con las columnas de interes
df_geografico <- data.frame(genero = data_clea$genus, latitud = data_clea$latitude, longitud = data_clea$longitude, elevacion = data_clea$elevation)
#Imputar filas con NA en la columna genero
df_geografico_sin_na <- df_geografico %>% filter(!is.na(genero))
#columna genero a una variable binaria
df_geografico_sin_na$aedes <- ifelse(df_geografico_sin_na$genero == "Aedes", 1, 0)
#la correlacion de Pearson entre Aedes y las coordenadas (latitud y longitud) conjuntamente
df_geografico_sin_na$coord_pair <- df_geografico_sin_na$latitud * df_geografico_sin_na$longitud
cor_coord_pair <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$coord_pair, use = "complete.obs")
#la correlacion de Pearson entre Aedes y la elevacion
cor_elevacion <- cor(df_geografico_sin_na$aedes, df_geografico_sin_na$elevacion, use = "complete.obs")
print(paste("Correlacion entre Aedes y coordenadas (latitud * longitud):", cor_coord_pair))
print(paste("Correlacion entre Aedes y elevacion:", cor_elevacion))
modelo_aedes_coords <- glm(aedes ~ latitud + longitud, data = df_geografico_sin_na, family = binomial)
summary(modelo_aedes_coords)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/Gustavo/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/Gustavo/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/Gustavo/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/Gustavo/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$fecha_measured_at <- as.Date(data_clea$`measured_at`) # Crear columna de fecha
data_clea$`hora_measured_at` <- format(data_clea$`measured_at`, format = "%H:%M:%S") # Crear columna de hora
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
head(data_clea)
#View(data_clea)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/Gustavo/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/Gustavo/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Supongamos que tu columna de fechas se llama `measured_on` en el DataFrame `data_clea`
fecha_mas_antigua <- min(data_clea$fecha_measured_at, na.rm = TRUE)
print(fecha_mas_antigua)
# Filtrar datos para que solo incluya elevaciones mayores que 0
data_filtered <- data_clea[as.numeric(data_clea$elevation) > 0, ]
# Crear un histograma usando ggplot con ancho de barra de 250
ggplot(data_filtered, aes(x = elevation)) +
geom_histogram(binwidth = 250, fill = "blue", color = "black") +  # Ancho de barra ajustado a 500
labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 250)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
# Graficar la frecuencia de observaciones por fecha
ggplot(data_clea, aes(x = fecha_measured_at)) +
geom_histogram(binwidth = 30, fill = "blue", color = "black") +  # Cada barra representa 1 día
labs(title = "Frecuencia de Observaciones por Fecha",
x = "Fecha",
y = "Frecuencia") +
theme_minimal()
# Graficar la frecuencia de observaciones por fecha
ggplot(data_clea, aes(x = fecha_measured_at)) +
geom_histogram(binwidth = 30, fill = "blue", color = "black") +  # Cada barra representa 1 día
labs(title = "Frecuencia de Observaciones por Fecha",
x = "Fecha",
y = "Frecuencia") +
theme_minimal()
# Convertir las varibles hora a formato hms
data_clea$hora_measured_at <- hms::as_hms(data_clea$measured_at)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir ahora las variables hora a decimales
data_clea$hora_measured_decimal <- as.numeric(data_clea$hora_measured_at) / 3600
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_measured_decimal", "hora_solar_decimal")]
# La matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
# Cargando una librería para utilizar funciones específicas
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library(hms)
data_ori <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/ASISTENCIA/Fabio Sánchez/Climate_Project/Gustavo/data/Air_temperature/GLOBEMeasurementData-22014.csv")
#View(data_ori)
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$fecha_measured_at <- as.Date(data_clea$`measured_at`) # Crear columna de fecha
data_clea$`hora_measured_at` <- format(data_clea$`measured_at`, format = "%H:%M:%S") # Crear columna de hora
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
#head(data_clea)
#View(data_clea)
# Hacer las columnas de longitud y latitud son numéricas
data_ori$longitude <- as.numeric(data_ori$longitude)
data_ori$latitude <- as.numeric(data_ori$latitude)
# Crear un mapa interactivo
leaflet(data_ori) %>%
addTiles() %>%  # Mapa base
addCircles(
lng = ~longitude,
lat = ~latitude,
color = "blue",  # Color de los círculos
radius = 50,  # Ajusta el tamaño del círculo según sea necesario
fillOpacity = 0.5,
stroke = FALSE
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "blue", domain = data_ori$longitude),
values = data_clea$longitude,
title = "Puntos")
# Filtrar datos para que solo incluya elevaciones mayores que 0
data_filtered <- data_clea[as.numeric(data_clea$elevation) > 0, ]
# Crear un histograma usando ggplot con ancho de barra de 250
ggplot(data_filtered, aes(x = elevation)) +
geom_histogram(binwidth = 250, fill = "blue", color = "black") +  # Ancho de barra ajustado a 500
labs(title = "Histograma de Elevación (Valores Positivos)",
x = "Elevación",
y = "Frecuencia") +
scale_x_continuous(breaks = seq(0, max(data_filtered$elevation, na.rm = TRUE), by = 250)) +  # Establecer los breaks en el eje x
theme_minimal()  # Estilo minimalista
# Convertir la columna a numérica si es necesario
data_clea$current_temp_C <- as.numeric(as.character(data_clea$current_temp_C))
# Crear el histograma con ancho de barra de 1
ggplot(data_clea, aes(x = current_temp_C)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +  # Ancho de barra ajustado a 1
labs(title = "Histograma Temperatura del Aire",
x = "Temperatura (°C)",
y = "Frecuencia") +
theme_minimal()  # Estilo minimalista
# Cambiar formato de la varibale hora, a uno adecuado para graficar
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$hora_solar_measured_at)
ggplot(data_clea, aes(x = hora_solar_measured_at)) +
geom_histogram(binwidth = 15*60, fill = "blue", color = "black") +  # Ancho de barra de 1 hora
labs(title = "Frecuencia de Mediciones por Hora",
x = "Hora del día",
y = "Frecuencia") +
theme_minimal()
# Graficar la frecuencia de observaciones por fecha
ggplot(data_clea, aes(x = fecha_measured_at)) +
geom_histogram(binwidth = 30, fill = "blue", color = "black") +  # Cada barra representa 1 día
labs(title = "Frecuencia de Observaciones por Fecha",
x = "Fecha",
y = "Frecuencia") +
theme_minimal()
# Convertir las varibles hora a formato hms
data_clea$hora_measured_at <- hms::as_hms(data_clea$measured_at)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir ahora las variables hora a decimales
data_clea$hora_measured_decimal <- as.numeric(data_clea$hora_measured_at) / 3600
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_measured_decimal", "hora_solar_decimal")]
# La matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
cor_matrix
# Visualizar la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# Convertir las varibles hora a formato hms
data_clea$hora_measured_at <- hms::as_hms(data_clea$measured_at)
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir ahora las variables hora a decimales
data_clea$hora_measured_decimal <- as.numeric(data_clea$hora_measured_at) / 3600
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_measured_decimal", "hora_solar_decimal")]
# La matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
# Convertir las variables hora a formato hms
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir la variable hora a decimales
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación, sin incluir `hora_measured_decimal`
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_solar_decimal")]
# La matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
# Convertir las variables hora a formato hms
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir la variable hora a decimales
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación, sin incluir `hora_measured_decimal`
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_solar_decimal")]
# La matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
# Convertir las variables hora a formato hms
data_clea$hora_solar_measured_at <- hms::as_hms(data_clea$solar_measured_at)
# Convertir la variable hora a decimales
data_clea$hora_solar_decimal <- as.numeric(data_clea$hora_solar_measured_at) / 3600
# Seleccionar las columnas para la matriz de correlación, sin incluir `hora_measured_decimal`
cor_data <- data_clea[, c("elevation", "latitude", "longitude", "current_temp_C", "hora_solar_decimal")]
# La matriz de correlación
cor_matrix <- cor(cor_data, use = "complete.obs")
cor_matrix
# Elimiinar primer observación que no sirve
data_clea <- data_ori[-1, ]
#Cambiar nombre de columnas
data_clea <- data_clea %>% rename("userid" = "air temps:userid", "measured_at" = "air temps:measured at","solar_measured_at" = "air temps:solar measured at", "current_temp_C" = "air temps:current temp (deg C)")
# Eliminar columnas que no aportan información
data_clea <- data_clea %>% select(- "air temps:comments", -"air temps:globe teams")
# Convertir a numericas las columnas que lo deben ser
cols_numericas <- c("latitude", "longitude", "elevation")  # Especifica los nombres de las columnas
data_clea[cols_numericas] <- lapply(data_clea[cols_numericas], as.numeric)
# Separar columnas que tiene fecha y hora juntas
data_clea$fecha_measured_at <- as.Date(data_clea$`measured_at`) # Crear columna de fecha
data_clea$`hora_measured_at` <- format(data_clea$`measured_at`, format = "%H:%M:%S") # Crear columna de hora
data_clea$`fecha_solar_measured_at` <- as.Date(data_clea$`solar_measured_at`) # Crear columna de fecha
data_clea$`hora_solar_measured_at` <- format(data_clea$`solar_measured_at`, format = "%H:%M:%S") # Crear columna de hora
#head(data_clea)
View(data_clea)
colnames(data_clea)
colnames(data_ori)
